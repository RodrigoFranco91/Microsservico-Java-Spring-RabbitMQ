- Nesse quarto capítulo vamos falar sobre falhas e resiliência.


- Hoje já temos o nosso fluxo (1 produtor, 1 Fanout Exchange, 2 filas e 2 consumidores) funcionando perfeitamente. Mas caso aconteça um erro, o que
vai acontecer? Vamos simular uma Exception no projeto Avaliacao que é um dos consumidores que temos.


- Simulando uma falha (Exception) no projeto Avaliação (Consumidor). Para simular, vamos criar o cenário: se o número do pagamento for igual 000 
uma RuntimeException será lançada. Veja como ficou o código:

	@Component
	public class AvaliacaoListener {
		@RabbitListener(queues = "pagamentos.detalhes-avaliacao")
		public void recebeMensagem(@Payload PagamentoDto pagamento) {

			System.out.println(pagamento.getId());
			System.out.println(pagamento.getNumero());

			if(pagamento.getNumero().equals("000")){
				throw  new RuntimeException("Simulando falha - Não consegui processar");
			}

			String mensagem = """
					Necessário criar registro de avaliação para o pedido: %s 
					Id do pagamento: %s
					Nome do cliente: %s
					Valor R$: %s
					Status: %s 
					""".formatted(pagamento.getPedidoId(),
					pagamento.getId(),
					pagamento.getNome(),
					pagamento.getValor(),
					pagamento.getStatus());

			System.out.println(mensagem);
		}
	}

Ao rodar o programa e enviar um Pagamento com número 000 a exception será lançada e isso vai deixar a aplicação em Loop e o evento ficará preso no
broker (na fila do RabbitMQ).


- Correção para solucionar o Looping quando ocorre um erro. Siga os passos:

	1) No projeto Avaliacao, vá no application.properties e adicione:
	
		spring.rabbitmq.listener.simple.retry.enabled=true
		spring.rabbitmq.listener.simple.retry.max-attempts=4
		
	A primeira é para habilitar a retentativa quando um erro acontecer (ou seja, ainda teremos looping). Mas a segunda vai limitar a retentativa em
	4 vezes, ou seja, teremos um looping apenas 4x. 
	
	2) Faça novamente uma request com Pagamento com número 0000, veremos agora que tivemos apenas 4 logs de erro e depois disso o looping para.
	Vendo no RabbitMQ Server, veremos também que o evento (mensagem) não ficou presa. Mas ainda temos um PROBLEMA. A mensagem SUMIU! E se for algo
	importante? Temos que corrigir isso. Não podemos a mensagem desaparecer e nem ficar presa!
	
	
- Configuração de tempo nas retentativas, pois quando um erro acontece a retentativa é logo em sequencia. Siga os passos:

 	1) No projeto Avaliacao, vá no application.properties e adicione:
	
		spring.rabbitmq.listener.simple.retry.initial-interval=5000
		spring.rabbitmq.listener.simple.retry.multiplier=1
		spring.rabbitmq.listener.simple.retry.max-interval=300000

	A primeira, que tem 5000 é referente a primeira retentativa, ou seja, tentamos uma vez e deu erro a outra tentativa será após 5000 milissegundos
	
	A segunda, que tem valor 1 é um multiplicador de tempo para cada nova retentativa (após a primeira retentativa). No caso vamos pegar o 5000
	que é da primeira configuração, multiplicar por 1 (valor da segunda propriedade) e somar, ou seja, a segunda retentativa vai esperar 10000 milissegundos.
	
	A última configuração/propriedade é referente ao tempo máximo de espera (Se passar de 30000 milissegundos não haverá mais retentativas).
	
	
- Correção para solucionar o problema de Sumiço de Mensagem quando ocorre um erro/falha:

	- Até o momento, a aplicação Avaliacao tenta 4x consumir uma mensagem, caso não consiga o evento SOME! 
	Uma solução é direcionar essa mensagem que vai sumir para uma outra fila, uma fila prórpia para erros (mensagens que não foram lidas). Essa
	alternativa se chama DLQ (Dead letter queue, em português "Fila de mensagens mortas"). Há cenários que essa soluçao é usada:
		
		- Comprimento da fila excedido;
		- Mensagem expirada (TTL) - Mensagem que ficou muito tempo na fila e ninguém nem tentou consumir...
		- Mensagem com tamanho muito grande, que excedeu o limite configurado;
		- Erros diversos.
	
	
	Siga os passos para implementar a DLQ:
	
		1) Sabemos que sempre precisamos de uma Exchange para escrever numa fila e existe uma Exchange específica para escrever em filas mortas, 
		no caso é a DLX (Dead Letter Exchanges);
		
		2) É uma boa prática a fila de mensagens mortas ter dlq no nome. A fila que vamos criar se chamará: pagamentos.detalhes-avaliacao-dlq
		
		3) A Exchange DLX será criada no projeto de Avaliacao (a Fanout Exchange criamos no serviço Pagamento que era o Produtor, aqui será diferente)
		Então na classe AvaliacaoAMQPConfiguration devemos colocar:
		
			@Bean
			public FanoutExchange deadLetterExchange() {
				return ExchangeBuilder
						.fanoutExchange("pagamentos.dlx")
						.build();
			}
			
		4) Agora precisamos criar a fila pagamentos.detalhes-avaliacao-dlq e vincular com a DLX que criamos no passo anterior. Então na classe 
		AvaliacaoAMQPConfiguration do projeto Avaliacao devemos colocar:
		
			//CRIANDO A FILA:
			@Bean
			public Queue filaDlqDetalhesAvaliacao() {
				return QueueBuilder
						.nonDurable("pagamentos.detalhes-avaliacao-dlq")
						.build();
			}

			//CRIANDO O VINCULO ENTRE FILA E EXCHANGE
			@Bean
			public Binding bindDlxPagamentoPedido() {
				return BindingBuilder
						.bind(filaDlqDetalhesAvaliacao())
						.to(deadLetterExchange());
			}
			
		5) Agora precisamos configurar que queremos pegar a mensagem que sofreu erro/falha na fila pagamentos.detalhes-avaliacao e enviá-la para
		pagamentos.detalhes-avaliacao-dlq. Essa configuração é feita na fila que recebe a mensagem, no caso pagamentos.detalhes-avaliacao, ou seja,
		vamos alterar o código que criou essa fila, ele ficará assim:
		
			@Bean
			public Queue filaDetalhesAvaliacao() {
				return QueueBuilder
						.nonDurable("pagamentos.detalhes-avaliacao")
						.deadLetterExchange("pagamentos.dlx")
						.build();
			}
		
		Veja que bastou adicionar a linha: .deadLetterExchange("pagamentos.dlx")
		O argumento que passamos é o nome da DLX que criamos (A Exchange específica para filas mortas)
		
		6) Como vamos atualizar a configuração de uma fila, teremos que apagar a mesma la no RabbitMQ Server e subir rodar os programas novamente;
		
		7) Agora basta fazer uma request que força o erro (pagamento com número 000), e ver se a mensagem foi para a DLQ.
				
				
	- Tenha em mente que podemos criar diversos cenários com a DLQ, por exemplo: Pegar sua mensagem e persistir no banco ou então depois de um tempo
	mover a mensagem que está em DLQ para uma fila normal (manualmente/plugin que chamamos de Shovel ou via código, entre outros...